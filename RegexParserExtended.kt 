import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.flow.update
import kotlinx.coroutines.launch
import java.lang.StringBuilder

// =================================================================================================
// SECTION 1: CONSTANTS
// =================================================================================================

/**
 * Provides a single, reliable source for all constants used across the feature.
 * This eliminates "magic strings," improves readability, and ensures maintainability.
 */
object JourneyConstants {
    const val PENDING_ACTIVATION_CODE_INITIAL = "PENDING_ACTIVATION_CODE_INITIAL"
    const val PRODUCT_SELECTION_SAVE = "PRODUCT_SELECTION_SAVE"
    const val NONE_OF_THESE_VALUE = "noneOfThem"
    const val LINK_VALUE = "LINK"
    const val SMART_INVESTOR_PREFIX = "IO"
    const val ACCORDION_STATE_EXPANDED = "expanded"
    const val ACCORDION_STATE_COLLAPSED = "collapsed"
    const val PAYLOAD_DATE_PATTERN = "yyyy-MM-dd"
    const val CHAR_SPACE = ' '
    const val DEFAULT_LITERAL = ""
    const val CONTENT_ACCOUNT_NUMBER_TYPE = "ACCOUNT_NUMBER"
    const val CONTENT_SORT_CODE_TYPE = "SORT_CODE"
    const val SORT_CODE_MAX_LEN = 8
    const val TYPE_REVIEW_FIELD = "REVIEW_FIELD"
    const val TYPE_DATE = "DATE"
    const val TYPE_RADIO_INPUT = "RADIO_INPUT"
    const val TYPE_RADIO_OPTION = "SEQUENTIAL_PAGE_RADIO_OPTION"
    const val TYPE_HYPERLINK = "SEQUENTIAL_PAGE_HYPERLINK"
    const val TYPE_INFO_PANEL = "SEQUENTIAL_PAGE_INFO_PANEL"
    const val TYPE_INPUT_FIELD = "INPUT_FIELD"
    const val KEYBOARD_ANDROID_NUMBER_CLEAR = "KEYBOARD_TYPE_NUMBER_CLEAR"
    const val KEYBOARD_ANDROID_PHONE = "KEYBOARD_TYPE_PHONE"
    const val UNSELECTED_ID = -1
    const val INITIAL_PROD_INDEX = 0
    const val INPUT_FIELD_DEFAULT_INDEX = -1
}

// =================================================================================================
// SECTION 2: DATA MODELS & STATE
// =================================================================================================

/**
 * Defines the entire state for the screen in one unified, immutable structure,
 * establishing a true Single Source of Truth.
 */
data class SequentialPageUiState(
    val fields: List<FieldState> = emptyList(),
    val investmentState: InvestmentState = InvestmentState(),
    val productPickerState: ProductPickerState = ProductPickerState(),
    val accordionState: AccordionState = AccordionState(),
    val buttonState: ButtonState = ButtonState(),
    val firstErrorFieldIndex: Int? = null,
    val isLoading: Boolean = true
)

data class FieldState(
    val key: String,
    val value: String = "",
    val type: String,
    val heading: String?,
    val mainText: String?,
    val regex: String?,
    val keyboardType: KeyboardType,
    val helpInfo: List<AccordionItem>?,
    val contentType: String?,
    val errorState: ErrorState = ErrorState()
)

data class InvestmentState(
    val selectedProduct: ProductData? = null,
    val userInput: String = "",
    val isProductSelectionError: Boolean = false,
    val inputViewError: ErrorState = ErrorState(),
    val transformation: Transformation? = null
)

data class ProductPickerState(
    val products: List<ProductPickerUIState> = emptyList(),
    val lastSelectedProductId: Int = JourneyConstants.UNSELECTED_ID
)

data class AccordionState(
    val items: Map<String, List<AccordionItem>> = emptyMap(),
    val isContentAvailable: Boolean = false,
    val expandedKey: String? = null
)

data class ButtonState(
    val isContinueButtonEnabled: Boolean = false,
    val accessibilityLabel: String = ""
)

data class ErrorState(val isError: Boolean = false, val errorMessage: String? = null)

data class Transformation(val type: String, val literal: String, val index: Int, val maxLength: Int)

// Other low-level data models inferred from code
enum class KeyboardType { TEXT, NUMBER_PASSWORD, PHONE }
interface ProductData {
    val radioTitle: String?
    val regex: String?
    val title: String?
    val icon: Any?
}
interface AccordionItem
interface ProductPickerUIState {
    val productIndex: Int
    val productTitle: String?
    val productDescription: String?
}

// =================================================================================================
// SECTION 3: HELPER CLASSES (USE CASES / MANAGERS)
// =================================================================================================

/**
 * A helper class for all analytics events.
 */
class JourneyAnalyticsManager {
    fun logViewScreen(label: String) = println("ANALYTICS: Screen Viewed - $label")
    fun logButtonClick(label: String) = println("ANALYTICS: Button Clicked - $label")
    fun logRadioProductSelection(label: String) = println("ANALYTICS: Product Selected - $label")
    fun logAccordionInteraction(isExpanded: Boolean) {
        val state = if (isExpanded) JourneyConstants.ACCORDION_STATE_EXPANDED else JourneyConstants.ACCORDION_STATE_COLLAPSED
        println("ANALYTICS: Accordion Toggled - $state")
    }
}

/**
 * A helper class to manage all logic for the Investment Account feature.
 */
class ManageInvestmentFeatureUseCase(private val analyticsManager: JourneyAnalyticsManager) {
    fun selectInvestmentProduct(product: ProductData, item: FieldState, currentState: InvestmentState): InvestmentState {
        analyticsManager.logRadioProductSelection(product.radioTitle ?: "")
        val literal = getInputLiteral(product.regex)
        return currentState.copy(
            selectedProduct = product,
            userInput = "",
            isProductSelectionError = false,
            inputViewError = ErrorState(),
            transformation = Transformation(
                type = item.contentType ?: JourneyConstants.DEFAULT_LITERAL,
                literal = literal,
                index = getLiteralIndex(product.regex, literal),
                maxLength = getMaxLengthFromRegex(product.regex)
            )
        )
    }

    fun getFormattedDisplayValue(currentState: InvestmentState): String {
        val transformation = currentState.transformation ?: return currentState.userInput
        val (userInput, separator, index) = Triple(currentState.userInput, transformation.literal, transformation.index)

        if (separator.isEmpty() || index <= 0 || userInput.length < index) {
            return userInput.take(transformation.maxLength)
        }

        val paddedInput = userInput.padEnd(userInput.length + 1, JourneyConstants.CHAR_SPACE)
        return StringBuilder()
            .append(paddedInput.substring(0, index))
            .append(separator)
            .append(paddedInput.substring(index).trim())
            .toString().take(transformation.maxLength)
    }

    private fun getInputLiteral(regex: String?) = when {
        regex?.contains(JourneyConstants.SMART_INVESTOR_PREFIX) == true -> JourneyConstants.SMART_INVESTOR_PREFIX
        else -> JourneyConstants.DEFAULT_LITERAL
    }

    private fun getLiteralIndex(regex: String?, literal: String) =
        regex?.indexOf(literal)?.takeIf { it >= 0 } ?: JourneyConstants.UNSELECTED_ID

    private fun getMaxLengthFromRegex(regex: String?) =
        if (regex?.contains("SORT_CODE") == true) JourneyConstants.SORT_CODE_MAX_LEN else 20
}

/**
 * A helper class to manage the state and interactions for the Large Product Picker (LPP).
 */
class ManageProductPickerUseCase(private val analyticsManager: JourneyAnalyticsManager) {
    fun selectProduct(productId: Int, description: String?, currentState: ProductPickerState): ProductPickerState {
        val newProducts = currentState.products.toMutableList()
        val lastSelectedId = currentState.lastSelectedProductId

        if (lastSelectedId != JourneyConstants.UNSELECTED_ID) {
            val lastItemIndex = newProducts.indexOfFirst { it.productIndex == lastSelectedId }
            if (lastItemIndex != -1) newProducts[lastItemIndex] = newProducts[lastItemIndex].copy(productDescription = null)
        }

        val selectedItemIndex = newProducts.indexOfFirst { it.productIndex == productId }
        if (selectedItemIndex != -1) {
            newProducts[selectedItemIndex] = newProducts[selectedItemIndex].copy(productDescription = description)
            analyticsManager.logRadioProductSelection(newProducts[selectedItemIndex].productTitle ?: "")
        }

        return currentState.copy(products = newProducts, lastSelectedProductId = productId)
    }
}

/**
 * A helper class to manage all interactions for accordion components.
 */
class ManageAccordionUseCase(private val analyticsManager: JourneyAnalyticsManager) {
    fun addAccordionContentFromField(field: FieldState, currentState: AccordionState): AccordionState {
        return if (!field.helpInfo.isNullOrEmpty()) {
            val newItems = currentState.items.toMutableMap().apply { this[field.key] = field.helpInfo }
            currentState.copy(items = newItems, isContentAvailable = true)
        } else currentState
    }

    fun toggleAccordion(fieldKey: String, currentState: AccordionState): AccordionState {
        val isCurrentlyExpanded = currentState.expandedKey == fieldKey
        val newExpandedKey = if (isCurrentlyExpanded) null else fieldKey
        analyticsManager.logAccordionInteraction(isExpanded = newExpandedKey != null)
        return currentState.copy(expandedKey = newExpandedKey)
    }
}


// =================================================================================================
// SECTION 4: MAIN VIEWMODEL
// =================================================================================================

/**
 * A lean, orchestrating ViewModel for the Sequential Page Capture feature.
 * This is the central hub that connects UI events to the helper classes (Use Cases)
 * and manages the single, unified UI state.
 */
class SequentialPageCaptureViewModel(
    // Dependencies are typically injected
    private val analyticsManager: JourneyAnalyticsManager = JourneyAnalyticsManager(),
    private val manageInvestmentUseCase: ManageInvestmentFeatureUseCase = ManageInvestmentFeatureUseCase(analyticsManager),
    private val manageProductPickerUseCase: ManageProductPickerUseCase = ManageProductPickerUseCase(analyticsManager),
    private val manageAccordionUseCase: ManageAccordionUseCase = ManageAccordionUseCase(analyticsManager)
    // Other dependencies like navigation, validation, etc., would be injected here
) : ViewModel() {

    private val _uiState = MutableStateFlow(SequentialPageUiState())
    val uiState: StateFlow<SequentialPageUiState> = _uiState.asStateFlow()

    fun onEvent(event: PageEvent) {
        when (event) {
            is PageEvent.Initialize -> initialize(event.module)
            is PageEvent.InvestmentProductSelected -> onInvestmentProductSelected(event.product, event.field)
            is PageEvent.LPPProductSelected -> onLppProductSelected(event.productId, event.description)
            is PageEvent.AccordionToggled -> onAccordionToggled(event.fieldKey)
            // Add other event handlers here...
        }
    }

    private fun initialize(module: Any /* Replace with actual Module class */) {
        // Here you would map the module data to the initial UiState
        // For example:
        // val fields = journeyMapper.mapResponseToFields(module.dataList)
        // val accordionState = fields.fold(AccordionState()) { acc, field ->
        //     manageAccordionUseCase.addAccordionContentFromField(field, acc)
        // }
        // _uiState.value = SequentialPageUiState(fields = fields, accordionState = accordionState, isLoading = false)
        analyticsManager.logViewScreen("PageInitialized")
    }

    private fun onInvestmentProductSelected(product: ProductData, field: FieldState) {
        _uiState.update { currentState ->
            currentState.copy(
                investmentState = manageInvestmentUseCase.selectInvestmentProduct(
                    product = product,
                    item = field,
                    currentState = currentState.investmentState
                )
            )
        }
    }

    private fun onLppProductSelected(productId: Int, description: String?) {
        _uiState.update { currentState ->
            currentState.copy(
                productPickerState = manageProductPickerUseCase.selectProduct(
                    productId = productId,
                    description = description,
                    currentState = currentState.productPickerState
                )
            )
        }
    }

    private fun onAccordionToggled(fieldKey: String) {
        _uiState.update { currentState ->
            currentState.copy(
                accordionState = manageAccordionUseCase.toggleAccordion(
                    fieldKey = fieldKey,
                    currentState = currentState.accordionState
                )
            )
        }
    }
}

// =================================================================================================
// SECTION 5: UI EVENTS
// =================================================================================================

/**
 * A sealed class for UI events, providing a type-safe contract between the View and ViewModel.
 */
sealed class PageEvent {
    data class Initialize(val module: Any) : PageEvent()
    data class InvestmentProductSelected(val product: ProductData, val field: FieldState) : PageEvent()
    data class LPPProductSelected(val productId: Int, val description: String?) : PageEvent()
    data class AccordionToggled(val fieldKey: String) : PageEvent()
    // Other events like FieldChanged, NextButtonClicked, BackPressed, etc.
}

